package view.util;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import javax.swing.*;

import controller.util.Database;
import model.util.Filial;
import model.util.Imovel;
import model.util.Movel;
import model.util.Patrimonio;

public class TelaPatrimonio extends JFrame {
    private String nome;
    private double valor;
    private Filial filial;
    
    public void setVisible(boolean visible) {
        super.setVisible(visible);
    }
    
    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public double getValor() {
        return valor;
    }

    public void setValor(double valor) {
        this.valor = valor;
    }

    public Filial getFilial() {
        return filial;
    }

    public void setFilial(Filial filial) {
        this.filial = filial;
    }
    
    public TelaPatrimonio(Database database) {
        setTitle("Tela de Patrimônio");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1920, 1080);
        
        // Cria um objeto Filial
        Filial filial = new Filial();
        ArrayList<Filial> filiais = Database.getFiliais(); // Inicializa a lista de filiais

        JTextArea patrimonioListArea = new JTextArea();
        patrimonioListArea.setEditable(false); // To make it read-only
        Font textAreaFont = new Font("Arial", Font.BOLD, 16);
        patrimonioListArea.setFont(textAreaFont);
        Color backgroundColor = new Color(255, 255, 255);
        patrimonioListArea.setBackground(backgroundColor);

        // Cria o painel de fundo customizado com o layout BorderLayout
        BackgroundPanel backgroundPanel = new BackgroundPanel("Imagens/telaSecundaria.png");
        backgroundPanel.setLayout(new BorderLayout());
        getContentPane().add(backgroundPanel, BorderLayout.CENTER);

        // Cria um botao para retornar a TelaPrincipal
        JButton backButton = new JButton();
        backButton.setIcon(new ImageIcon("Imagens/iconeRetorno.png"));
        backButton.setBorderPainted(false);
        backButton.setContentAreaFilled(false);
        backButton.setFocusPainted(false);
        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                TelaPrincipal telaPrincipal = new TelaPrincipal();
                telaPrincipal.setVisible(true);
                dispose(); // Fecha a tela atual (TelaPatrimonio)
            }
        });

        // Cria um painel para o botao no canto superior direito
        JPanel buttonPanel = new JPanel();
        buttonPanel.setOpaque(false);
        buttonPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.add(backButton);

        JPanel patrimonioPanel = new JPanel(new BorderLayout());
        patrimonioPanel.setBackground(Color.BLACK);
        patrimonioPanel.add(patrimonioListArea, BorderLayout.CENTER);

        JScrollPane scrollPane = new JScrollPane(patrimonioPanel);
        scrollPane.setPreferredSize(new Dimension(400, 200));

        //Adiciona o painel de botoes ao painel de fundo
        backgroundPanel.add(buttonPanel, BorderLayout.NORTH);

        // Cria os botoes de opcoes
        JButton adicionarButton = new JButton(new ImageIcon("Imagens/Adicionar_button.png"));
        JButton editarButton = new JButton(new ImageIcon("Imagens/Editar_button.png"));
        JButton buscarButton = new JButton(new ImageIcon("Imagens/Buscar_button.png"));
        JButton removerButton = new JButton(new ImageIcon("Imagens/Excluir_button.png"));
        JButton listarButton = new JButton(new ImageIcon("Imagens/Listar_button.png"));

        // Define o tamanho dos botoes
        adicionarButton.setPreferredSize(new Dimension(200, 60));
        editarButton.setPreferredSize(new Dimension(200, 60));
        buscarButton.setPreferredSize(new Dimension(200, 60));
        removerButton.setPreferredSize(new Dimension(200, 60));
        listarButton.setPreferredSize(new Dimension(200, 60));

        ActionListener buttonListener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (e.getSource() == adicionarButton) {
                    System.out.println("Opção selecionada: Adicionar");
                    
                    // Verifica se o patrimonio e movel ou imovel
                    String[] options = { "Movel", "Imovel" };
                    int selectedOption = JOptionPane.showOptionDialog(null, "Selecione o tipo de patrimônio:",
                            "Adicionar Patrimônio", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null,
                            options, options[0]);

                    if (selectedOption == 0) {
                        // Se for movel, pede o nome, valor, peso, cor, dimensao, tipo, e filial
                        String novoNome = JOptionPane.showInputDialog("Digite o nome do patrimônio:");
                        double novoValor = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor do patrimônio:"));
                        int novoPeso = Integer.parseInt(JOptionPane.showInputDialog("Digite o peso do patrimônio:"));
                        String novaCor = JOptionPane.showInputDialog("Digite a cor do patrimônio:");
                        int novaDimensao = Integer.parseInt(JOptionPane.showInputDialog("Digite a dimensão do patrimônio:"));
                        String filialNome = JOptionPane.showInputDialog("Digite o nome da filial:");

                        // Busca a filial pelo nome informado
                        Filial filial = null;
                        for (Filial f : filiais) {
                            if (f.getEndereco().equalsIgnoreCase(filialNome)) {
                                filial = f;
                                break;
                            }
                        }

                        if (filial != null) {
                            // Cria um novo objeto Movel e adiciona à filial
                            Movel novoMovel = new Movel(novoNome, novoValor, novoPeso, novaCor, novaDimensao);
                            filial.adicionarPatrimonio(novoMovel);
                        } else {
                            JOptionPane.showMessageDialog(null, "Filial não encontrada!");
                        }
                    } else if (selectedOption == 1) {
                        // Se for Imovel, pede o nome, cep, codigo, tamanho, valor, e filial
                        String novoNome = JOptionPane.showInputDialog("Digite o nome do patrimônio:");
                        int novoCEP = Integer.parseInt(JOptionPane.showInputDialog("Digite o CEP do patrimônio:"));
                        int novoCodigo = Integer.parseInt(JOptionPane.showInputDialog("Digite o código do patrimônio:"));
                        double novoTamanho = Double.parseDouble(JOptionPane.showInputDialog("Digite o tamanho do patrimônio:"));
                        double novoValor = Double.parseDouble(JOptionPane.showInputDialog("Digite o valor do patrimônio:"));
                        String filialNome = JOptionPane.showInputDialog("Digite o nome da filial:");

                        // Busca a filial pelo nome informado
                        Filial filial = null;
                        for (Filial f : filiais) {
                            if (f.getEndereco().equalsIgnoreCase(filialNome)) {
                                filial = f;
                                break;
                            }
                        }

                        if (filial != null) {
                            // Cria um novo objeto Imovel e adiciona à filial
                            Imovel novoImovel = new Imovel(novoNome, novoCEP, novoCodigo, novoTamanho, novoValor);
                            filial.adicionarPatrimonio(novoImovel);
                        } else {
                            JOptionPane.showMessageDialog(null, "Filial não encontrada!");
                        }
                    }

                } else if (e.getSource() == editarButton) {
                    System.out.println("Opção selecionada: Editar");
                    // Permite ao usuario alterar o nome do patrimonio
                    String nomeAtual = JOptionPane.showInputDialog("Digite o nome atual do patrimônio:");
                    String novoNome = JOptionPane.showInputDialog("Digite o novo nome do patrimônio:");
                    
                    // Verifica se existem itens na Lista
                    if (filial.getPatrimonio().isEmpty()) {
                        // Display the message and close the editing area
                        JOptionPane.showMessageDialog(null, "Nenhum patrimônio cadastrado!");
                        return;
                    }
                    filial.editarPatrimonio(nomeAtual, novoNome);
                } else if (e.getSource() == buscarButton) {
                	System.out.println("Opção selecionada: Buscar");
                	String searchName = JOptionPane.showInputDialog("Digite o nome do patrimônio a ser buscado:");
                    Patrimonio foundPatrimonio = null;
                    
                    for (Patrimonio patrimonio : filial.getPatrimonio()) {
                        if (patrimonio.getNome().equalsIgnoreCase(searchName)) {
                            foundPatrimonio = patrimonio;
                            break;
                        }
                    }
                    
                    if (foundPatrimonio != null) {
                        if (foundPatrimonio instanceof Movel) {
                            Movel movel = (Movel) foundPatrimonio;
                            JOptionPane.showMessageDialog(TelaPatrimonio.this,
                                    "Patrimônio encontrado:\n" +
                                    "Nome: " + movel.getNome() + "\n" +
                                    "Código: " + movel.getCodigo() + "\n" +
                                    "Valor: R$" + movel.getValor() + "\n" +
                                    "Peso: " + movel.getPeso() + "Kg\n" +
                                    "Cor: " + movel.getCor() + "\n" +
                                    "Dimensão: " + movel.getDimensao() + "m3\n");
                        } else if (foundPatrimonio instanceof Imovel) {
                            Imovel imovel = (Imovel) foundPatrimonio;
                            JOptionPane.showMessageDialog(TelaPatrimonio.this,
                                    "Patrimônio encontrado:\n" +
                                    "Nome: " + imovel.getNome() + "\n" +
                                    "CEP: " + imovel.getCep() + "\n" +
                                    "Tamanho: " + imovel.getTamanho() + "m2\n" +
                                    "Valor: R$" + imovel.getValor());
                        }
                    } else {
                        JOptionPane.showMessageDialog(TelaPatrimonio.this, "Patrimônio não encontrado!");
                    }
                } else if (e.getSource() == removerButton) {
                    System.out.println("Opção selecionada: Remover");
                    // Permite ao usuario excluir um patrimonio da Filial
                    String nome = JOptionPane.showInputDialog("Digite o nome do patrimônio a ser removido:");
                    filial.excluirPatrimonio(nome);
                } else if (e.getSource() == listarButton) {
                    patrimonioListArea.setText("");

                    // Pega a Lista de patrimonios da classe Filial
                    ArrayList<Patrimonio> patrimonios = filial.getPatrimonio();

                    // Verifica se ha itens na Lista
                    if (patrimonios.isEmpty()) {
                        patrimonioListArea.setText("Nenhum patrimônio cadastrado.");
                    } else {
                        // Imprime na tela a lista de itens
                        for (Patrimonio patrimonio : patrimonios) {
                            if (patrimonio instanceof Movel) {
                                Movel movel = (Movel) patrimonio;
                                patrimonioListArea.append("Nome: " + movel.getNome() + "\n");
                                patrimonioListArea.append("Código: " + movel.getCodigo() + "\n");
                                patrimonioListArea.append("Valor: R$" + movel.getValor() + "\n");
                                patrimonioListArea.append("Peso: " + movel.getPeso() + "Kg\n");
                                patrimonioListArea.append("Cor: " + movel.getCor() + "\n");
                                patrimonioListArea.append("Dimensão: " + movel.getDimensao() + "m3\n");
                                patrimonioListArea.append("\n");
                            } else if (patrimonio instanceof Imovel) {
                                Imovel imovel = (Imovel) patrimonio;
                                patrimonioListArea.append("Nome: " + imovel.getNome() + "\n");
                                patrimonioListArea.append("CEP: " + imovel.getCep() + "\n");
                                patrimonioListArea.append("Tamanho: " + imovel.getTamanho() + "m2\n");
                                patrimonioListArea.append("Valor: R$" + imovel.getValor() + "\n");
                                patrimonioListArea.append("\n");
                            }
                        }
                    }
                }
            }
        };

        adicionarButton.addActionListener(buttonListener);
        editarButton.addActionListener(buttonListener);
        buscarButton.addActionListener(buttonListener);
        removerButton.addActionListener(buttonListener);
        listarButton.addActionListener(buttonListener);

        // Centraliza os botoes no painel de fundo
        JPanel centerPanel = new JPanel(new GridBagLayout());
        centerPanel.setOpaque(false);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(10, 10, 10, 10);
        centerPanel.add(adicionarButton, gbc);

        gbc.gridx = 1;
        centerPanel.add(editarButton, gbc);

        gbc.gridx = 2;
        centerPanel.add(buscarButton, gbc);

        gbc.gridx = 3;
        centerPanel.add(removerButton, gbc);

        gbc.gridx = 4;
        centerPanel.add(listarButton, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 5;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 10, 10, 10);
        centerPanel.add(scrollPane, gbc);

        // Adiciona o painel central ao painel de fundo
        backgroundPanel.add(centerPanel, BorderLayout.CENTER);

    }

    class BackgroundPanel extends JPanel {
        private Image backgroundImage;

        public BackgroundPanel(String imagePath) {
            // Carrega a imagem de fundo
            backgroundImage = new ImageIcon(imagePath).getImage();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            // Desenha a imagem de fundo
            g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
        }
    }
}
